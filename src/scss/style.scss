// imports

@use "sass:math";

// global stuff

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    --cube-size: min(200px, 20vw);
    --distance4d: 2.2;
    --point-size: 25px;
    perspective: calc(4 * var(--cube-size));
    background-color: black;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    transform-style: preserve-3d;
    overflow: hidden;
}

// trig functions (approximation)

.trig {
    --sin-term1: var(--angle);
    --sin-term2: calc(
        (var(--angle) * var(--angle) * var(--angle)) / 6
    );
    --sin-term3: calc(
        (
                var(--angle) * var(--angle) * var(--angle) *
                    var(--angle) * var(--angle)
            ) / 120
    );
    --sin-term4: calc(
        (
                var(--angle) * var(--angle) * var(--angle) *
                    var(--angle) * var(--angle) * var(--angle) *
                    var(--angle)
            ) / 5040
    );
    --sin-term5: calc(
        (
                var(--angle) * var(--angle) * var(--angle) *
                    var(--angle) * var(--angle) * var(--angle) *
                    var(--angle) * var(--angle) * var(--angle)
            ) / 362880
    );
    --sin: calc(
        var(--sin-term1) - var(--sin-term2) + var(--sin-term3) -
            var(--sin-term4) + var(--sin-term5)
    );
    --cos-term1: 1;
    --cos-term2: calc((var(--angle) * var(--angle)) / 2);
    --cos-term3: calc(
        (var(--angle) * var(--angle) * var(--angle) * var(--angle)) /
            24
    );
    --cos-term4: calc(
        (
                var(--angle) * var(--angle) * var(--angle) *
                    var(--angle) * var(--angle) * var(--angle)
            ) / 720
    );
    --cos-term5: calc(
        (
                var(--angle) * var(--angle) * var(--angle) *
                    var(--angle) * var(--angle) * var(--angle) *
                    var(--angle) * var(--angle)
            ) / 40320
    );
    --cos: calc(
        var(--cos-term1) - var(--cos-term2) + var(--cos-term3) -
            var(--cos-term4) + var(--cos-term5)
    );
}

// cube

#cube {
    --angle: 0;
    --angle2: 0;
    position: relative;
    transform-style: preserve-3d;
    transform: rotateY(calc(var(--angle2) * 1deg));
    transition: transform 800ms ease-out;
}

// point 4d

.point4d {
    --rotated-c: calc(var(--c) * var(--cos) - var(--d) * var(--sin));
    --rotated-d: calc(var(--c) * var(--sin) + var(--d) * var(--cos));
    --factor: calc(1 / (var(--distance4d) - var(--rotated-d)));
    --x: calc(var(--factor) * var(--a));
    --y: calc(var(--factor) * var(--b));
    --z: calc(var(--factor) * var(--rotated-c));
    position: absolute;
    width: var(--point-size);
    height: var(--point-size);
    border-radius: 50%;
    background: radial-gradient(yellow, green);
    box-shadow: 0px 0px 10px #fff5;
    transform: translateX(calc(var(--x) * var(--cube-size) - 50%))
        translateY(calc(var(--y) * var(--cube-size) - 50%))
        translateZ(calc(var(--z) * var(--cube-size)))
        rotateY(calc(-1 * var(--angle2) * 1deg));
    transition: inherit;
}

// areas to control the angles

$number: 20;

.area {
    position: fixed;
    --width: calc(100vw / #{$number});
    --height: calc(100vh / #{$number});
    width: var(--width);
    height: var(--height);
    z-index: 10;
}

@for $i from 0 to $number {
    @for $j from 0 to $number {
        .area:nth-of-type(#{$i * $number + $j + 1}) {
            left: calc(#{$i} * var(--width));
            top: calc(#{$j} * var(--height));
            &:hover ~ #cube {
                --angle: #{math.div($i * 2 * math.$pi, $number)};
                --angle2: #{math.div($j * 360, $number)};
            }
        }
    }
}
